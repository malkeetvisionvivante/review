<?php

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use App\Countries;
use App\States;
use App\User;
use App\Company;
use App\Managers;
use App\Departments;
use App\Reviews;
use Illuminate\Support\Facades\Hash;
use File;
use App\UserAgent;

class ProfileUserController extends Controller {

    public function __construct() {
        $this->middleware(['is_admin'], ['except' => ['admin_login','user_login']]);
    }

    public function users_list(Request $request){
      $sidebar = 'users';
      $type = 'name';
      $name = '';
      if($request->type == 'name' && isset($request->name) && !empty($request->name)){
        $data = User::where('role',3)->whereIn('type',['Imported','CreatedByUser','ProfileCreatedByAdmin']);
        $name = $request->name;
        $bindArr = explode(" ", $name);
        $regex = ".*(".implode("|", $bindArr).").*"; 
        $data = $data->where('name',"regexp", $regex);
      }
      else if($request->type == 'company' && isset($request->name) && !empty($request->name)){
        $name = $request->name;
        $type = 'company';
        $bindArr = explode(" ", $name);
        $regex = ".*(".implode("|", $bindArr).").*"; 
        $campanies = Company::where('company_name',"regexp", $regex)->get();
        $comanyIds = [];
        if($campanies->count() > 0){;
          foreach ($campanies as $key => $value) {
             $comanyIds[] = $value->id;
          }
        }
         $data = User::where('role',3)->whereIn('company_id',$comanyIds)->whereIn('type',['Imported','CreatedByUser','ProfileCreatedByAdmin']);
      } else {
           $data = User::where('role',3)->whereIn('type',['Imported','CreatedByUser','ProfileCreatedByAdmin']);
        }
      $countData = $data->count();
      $data = $data->orderBy('id','DESC')->paginate(10);
      return view('admin.profile_user.list',compact('data','sidebar','name','countData','type'));
    }
    public function add_users(Request $request) {
       $sidebar = 'users';
        if($request->isMethod('post'))
        {
            $postData = $request->all();
            $validatedData = $request->validate([
                'first_name' => 'required',
                'last_name' => 'required',
                'email' => 'unique:users',
                //'phone' => 'required',
                'company_id' => 'required',
                'department_id' => 'required',
                'job_title' => 'required',
                //'password' => 'required',
                //'cpassword' => 'required|same:password',
                'profile' => 'file|mimes:jpg,png,gif,jpeg,svg,tiff',
            ]);
            $email = $request->email;
            if(!$email){
              $email = time()."_".time()."@preformly.com";
            }
            $target_file = null;
              if($request->hasFile('profile'))
              {
                $file = $request->file('profile');
                $file_name = 'user_'.uniqid().'_'.time().'.'.$file->getClientOriginalExtension();
                 $destinationPath = public_path()."/images/users";
                $file->move($destinationPath,$file_name);
                $target_file = $file_name;
              }  
            $data = new User;
            $data->name = $request->first_name;
            $data->last_name = $request->last_name;
            $data->email = $email;
            $data->company_id = $request->company_id;
            $data->department_id = $request->department_id;
            $data->job_title = $request->job_title;
            //$data->password = Hash::make($request->password);
            $data->phone = $request->phone;
            $data->type = 'ProfileCreatedByAdmin';
            $ip_address = UserAgent::IPADDRESS();
            $data->ip_address = $ip_address;
            $data->location = UserAgent::LOCATION($ip_address);
            $data->device_type = UserAgent::DEVICETYPE();
            $data->created_by = Auth::guard('admin')->user()->id;
            $data->role = 3;
            if(isset($target_file) && !empty($target_file))
            {
               $data->profile = $target_file;
            }
            $data->save();
            toastr()->success('Profile Created successfully!'); 
            return redirect('admin/profile/users/list');


       } else {
          $companys = Company::all();
          $departments = Departments::all();
           return view('admin.profile_user.add',compact('sidebar','companys','departments'));
       }
    }

    public function edit_user(Request $request,$id) {
        $sidebar = 'users';
        if($request->isMethod('post'))
        { 
                $validatedData = $request->validate([
                'first_name' => 'required',
                'last_name' => 'required',
                //'email' => 'required|unique:users,email,'.$id,
                //'phone' => 'required',
                'company_id' => 'required',
                'department_id' => 'required',
                'job_title' => 'required',
                'profile' => 'file|mimes:jpg,jpeg,png,svg,tiff,gif',
                //'cpassword' => 'same:password',
               
            ]);

            $data = User::find($id);
            $data->name = $request->first_name;
            $data->last_name = $request->last_name;
            $data->company_id = $request->company_id;
            $data->phone = $request->phone;
            $data->email = $request->email;
             $data->department_id = $request->department_id;
            $data->job_title = $request->job_title;
            if($request->hasFile('profile'))
            {
              if(!empty($data->profile))
              {
                  if(file_exists(public_path().'/images/users/'.$data->profile))
                  {
                     unlink(public_path().'/images/users/'.$data->profile);
                  }
              }    
                
                    $files = $request->file('profile');
                    $file_name = uniqid().'.'.$files->getClientOriginalExtension();
                    $destinationPath = public_path()."/images/users";
                    $files->move($destinationPath,$file_name);
                    $target_file = $file_name;
                    $data->profile = $target_file;
            }
            if(isset($request->old_password) && !empty($request->old_password) && !empty($request->password))
            {
               if(empty($request->password))
               {
                  toastr()->error('Please enter new password'); 
                  return back()->with('flash_mesaage_error','Please enter new password');
               }
               if(empty($request->cpassword))
               {
                  toastr()->error('Please enter confirm password');
                 return back()->with('flash_mesaage_error','Please enter confirm password');
               }
               if($request->password != $request->cpassword)
               {
                  toastr()->error('Password and Confirm password Not match'); 
                  return back()->with('flash_mesaage_error','Password and Confirm password Not match');
               }
               if (Hash::check($request->old_password, $data->password))
               {
                  $data->password = Hash::make($request->password);
               }
               else
               {
                  toastr()->error('Old Password Not Match'); 
                  return back()->with('flash_mesaage_error','Old Password Not Match');    
               }
            }
            $data->save();
            toastr()->success('Profile Update successfully!'); 
            return back();
        }
        else
        {
          $companys = Company::all();
          $data = User::where('id',$id)->where('role',3)->first();
           $departments = Departments::all();
          if(!empty($data))
          {
            return view('admin.profile_user.edit',compact('sidebar','data','companys','departments'));

          }
          return back();
        }
    }

    public function delete_user(Request $request,$id) {
        if($id)
          {
             $delete = User::where('id',$id)->where('role','!=',1)->delete();
             toastr()->success('Profile Deleted successfully!'); 
             return back();
          }
    }
    public function users_detail(Request $request,$id, $as = null) {
      $type = 'customer_id';
      if($as != null){
        $type = $as;
      }
        if($id){
          $sidebar = 'users';
          $data1 = User::where('id',$id)->first();
          $data = Reviews::where([[$type,$id],['working_as','Manager']])->paginate(10);
          $peer = Reviews::where([[$type,$id],['working_as','Peer']])->paginate(10);
           return view('admin.profile_user.detail',compact('type','data','data1','sidebar','peer'));
        }
   }

   public function removeProfileSingleReview(Request $req){
    $data = Reviews::where('id', $req->id);
    if($req->role == 'comment')
    $res = $data->update(['comment' => null]) ? ['success' => 'Comment removed successfully.'] : ['error' => 'Something went wrong.'];
    else
    $res =  $data->delete() ? ['success' => 'Review deleted successfully.'] : ['error' => 'Something went wrong.'];
    return response()->json($res);
 }
}
